// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: userService.proto

package userService

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserService service

type UserService interface {
	RpcAuthUser(ctx context.Context, in *RpcAuthUserRequest, opts ...client.CallOption) (*RpcAuthUserRequest, error)
	RpcCreateUser(ctx context.Context, in *RpcCreateUserRequest, opts ...client.CallOption) (*RpcCreateUserRequest, error)
	RpcDeleteUser(ctx context.Context, in *RpcDeleteUserRequest, opts ...client.CallOption) (*RpcDeleteUserRequest, error)
	RpcModifyUser(ctx context.Context, in *RpcModifyUserRequest, opts ...client.CallOption) (*RpcModifyUserResponse, error)
	RpcModifyUserPassword(ctx context.Context, in *RpcModifyUserPasswordRequest, opts ...client.CallOption) (*RpcModifyUserPasswordResponse, error)
	RpcGetUserById(ctx context.Context, in *RpcGetUserByIdRequest, opts ...client.CallOption) (*RpcGetUserByIdResponse, error)
	RpcGetUsers(ctx context.Context, in *RpcGetUsersRequest, opts ...client.CallOption) (*RpcGetUsersResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "userService"
	}
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) RpcAuthUser(ctx context.Context, in *RpcAuthUserRequest, opts ...client.CallOption) (*RpcAuthUserRequest, error) {
	req := c.c.NewRequest(c.name, "UserService.RpcAuthUser", in)
	out := new(RpcAuthUserRequest)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) RpcCreateUser(ctx context.Context, in *RpcCreateUserRequest, opts ...client.CallOption) (*RpcCreateUserRequest, error) {
	req := c.c.NewRequest(c.name, "UserService.RpcCreateUser", in)
	out := new(RpcCreateUserRequest)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) RpcDeleteUser(ctx context.Context, in *RpcDeleteUserRequest, opts ...client.CallOption) (*RpcDeleteUserRequest, error) {
	req := c.c.NewRequest(c.name, "UserService.RpcDeleteUser", in)
	out := new(RpcDeleteUserRequest)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) RpcModifyUser(ctx context.Context, in *RpcModifyUserRequest, opts ...client.CallOption) (*RpcModifyUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.RpcModifyUser", in)
	out := new(RpcModifyUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) RpcModifyUserPassword(ctx context.Context, in *RpcModifyUserPasswordRequest, opts ...client.CallOption) (*RpcModifyUserPasswordResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.RpcModifyUserPassword", in)
	out := new(RpcModifyUserPasswordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) RpcGetUserById(ctx context.Context, in *RpcGetUserByIdRequest, opts ...client.CallOption) (*RpcGetUserByIdResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.RpcGetUserById", in)
	out := new(RpcGetUserByIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) RpcGetUsers(ctx context.Context, in *RpcGetUsersRequest, opts ...client.CallOption) (*RpcGetUsersResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.RpcGetUsers", in)
	out := new(RpcGetUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	RpcAuthUser(context.Context, *RpcAuthUserRequest, *RpcAuthUserRequest) error
	RpcCreateUser(context.Context, *RpcCreateUserRequest, *RpcCreateUserRequest) error
	RpcDeleteUser(context.Context, *RpcDeleteUserRequest, *RpcDeleteUserRequest) error
	RpcModifyUser(context.Context, *RpcModifyUserRequest, *RpcModifyUserResponse) error
	RpcModifyUserPassword(context.Context, *RpcModifyUserPasswordRequest, *RpcModifyUserPasswordResponse) error
	RpcGetUserById(context.Context, *RpcGetUserByIdRequest, *RpcGetUserByIdResponse) error
	RpcGetUsers(context.Context, *RpcGetUsersRequest, *RpcGetUsersResponse) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		RpcAuthUser(ctx context.Context, in *RpcAuthUserRequest, out *RpcAuthUserRequest) error
		RpcCreateUser(ctx context.Context, in *RpcCreateUserRequest, out *RpcCreateUserRequest) error
		RpcDeleteUser(ctx context.Context, in *RpcDeleteUserRequest, out *RpcDeleteUserRequest) error
		RpcModifyUser(ctx context.Context, in *RpcModifyUserRequest, out *RpcModifyUserResponse) error
		RpcModifyUserPassword(ctx context.Context, in *RpcModifyUserPasswordRequest, out *RpcModifyUserPasswordResponse) error
		RpcGetUserById(ctx context.Context, in *RpcGetUserByIdRequest, out *RpcGetUserByIdResponse) error
		RpcGetUsers(ctx context.Context, in *RpcGetUsersRequest, out *RpcGetUsersResponse) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) RpcAuthUser(ctx context.Context, in *RpcAuthUserRequest, out *RpcAuthUserRequest) error {
	return h.UserServiceHandler.RpcAuthUser(ctx, in, out)
}

func (h *userServiceHandler) RpcCreateUser(ctx context.Context, in *RpcCreateUserRequest, out *RpcCreateUserRequest) error {
	return h.UserServiceHandler.RpcCreateUser(ctx, in, out)
}

func (h *userServiceHandler) RpcDeleteUser(ctx context.Context, in *RpcDeleteUserRequest, out *RpcDeleteUserRequest) error {
	return h.UserServiceHandler.RpcDeleteUser(ctx, in, out)
}

func (h *userServiceHandler) RpcModifyUser(ctx context.Context, in *RpcModifyUserRequest, out *RpcModifyUserResponse) error {
	return h.UserServiceHandler.RpcModifyUser(ctx, in, out)
}

func (h *userServiceHandler) RpcModifyUserPassword(ctx context.Context, in *RpcModifyUserPasswordRequest, out *RpcModifyUserPasswordResponse) error {
	return h.UserServiceHandler.RpcModifyUserPassword(ctx, in, out)
}

func (h *userServiceHandler) RpcGetUserById(ctx context.Context, in *RpcGetUserByIdRequest, out *RpcGetUserByIdResponse) error {
	return h.UserServiceHandler.RpcGetUserById(ctx, in, out)
}

func (h *userServiceHandler) RpcGetUsers(ctx context.Context, in *RpcGetUsersRequest, out *RpcGetUsersResponse) error {
	return h.UserServiceHandler.RpcGetUsers(ctx, in, out)
}
